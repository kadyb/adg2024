---
title: "Algorytmy danych geoprzestrzennych"
subtitle: "Wprowadzenie"
author: "Krzysztof Dyba"
format: 
  revealjs:
    slide-number: c/t
    incremental: true
    embed-resources: true
css: _style.css
---

## Informacje o zajęciach

::::: columns
::: {.nonincremental}
::: {.column width="50%"}
#### Wykłady

-   liczba godzin: 15
-   zaliczenie: test
:::

::: {.column width="50%"}
#### Ćwiczenia

-   liczba godzin: 30
-   część praktyczna w PyQGIS
-   zaliczenie: projekt końcowy + aktywność na zajęciach
:::
:::
:::::

\
\
\
Kontakt: [krzysztof.dyba\@amu.edu.pl](mailto:krzysztof.dyba@amu.edu.pl){.email}

## Źródła wiedzy

::::: columns
::: {.column width="33%"}
[![](https://r.geocompx.org/images/cover2.png)](https://r.geocompx.org)
:::

::: {.column width="33%"}
[![](https://r-spatial.org/book/images/cover.jpg)](https://r-spatial.org/book)
:::

::: {.column width="33%"}
[![](https://pythongis.org/_static/pythongis-logo.png)](https://pythongis.org)
:::
:::::

## Algorytm

::: {.fragment}
**Algorytm** to zestaw precyzyjnie zdefiniowanych instrukcji krok po kroku
służących do rozwiązania konkretnego problemu lub wykonania zadania
w skończonym czasie.
:::

::: {.fragment}
Jest to jednoznaczna sekwencja operacji, która wykorzystuje dane wejściowe,
przetwarza je zgodnie z określonymi zasadami i generuje dane wyjściowe.
:::

## Cechy algorytmu

::: {style="font-size: 90%;"}
- **Jednoznaczność** -- każdy krok algorytmu musi być precyzyjnie i jednoznacznie
zdefiniowany bez miejsca na otwarte interpretacje.
- **Skończoność** -- algorytm musi zakończyć działanie po skończonej liczbie
kroków, tj. nie może działać w nieskończoność.
- **Efektywność** -- każdy krok algorytmu musi być wykonywalny i osiągalny
przy użyciu dostępnych zasobów.
- **Poprawność** -- algorytm powinien generować poprawne dane wyjściowe (dla
poprawnych danych wejściowych).
:::

## Przykłady algorytmów

::::: columns
::: {.column width="50%"}

::: {.fragment}
![](https://i0.wp.com/pixahive.com/wp-content/uploads/2021/03/Cooking-noodles-at-home-384502-pixahive.jpg)

::: {style="font-size: 90%;"}
Przepis kuchenny to instrukcja w jaki sposób przygotować składniki (dane
wejściowe), aby otrzymać potrawę (dane wyjściowe).
:::

:::
:::

::: {.column width="50%"}

::: {style="font-size: 90%;"}
- Algorytmy sortowania (np. bąbelkowe, pozycyjne)
- Algorytmy wyszukiwania (np. liniowe, binarne)
- Algorytmy szyfrowania (np. algorytm Huffmana)
- Algorytmy uczenia maszynowego
- i wiele innych
:::

:::
:::::

## Schemat blokowy

::::: columns
::: {.column width="50%"}
::: {.fragment}
```{mermaid}
flowchart TD
    A[Start] --> B{PUNKT DECYZYJNY}
    B -->|Tak| C[AKCJA 1]
    B -->|Nie| D[AKCJA 2]
    C --> E[Koniec]
    D --> E
```

:::: {style="font-size: 50%;"}
Prostokąt reprezentuje etap procesu.

Romb reprezentuje punkt decyzyjny, który rozgałęzia przepływ na podstawie
warunków TAK/NIE lub PRAWDA/FAŁSZ.
::::

:::
:::

::: {.column width="50%"}
::: {.fragment}
:::: {style="font-size: 90%;"}
**Schemat blokowy** to wizualna reprezentacja procesu, która ilustruje sekwencję
kroków, decyzji i działań podejmowanych w celu osiągnięcia określonego celu.

W przeciwieństwie do algorytmu, cechuje się uproszczoną formą, przez co jest
łatwiejszy w odbiorze.

<https://mermaid.js.org/>
::::
:::
:::
:::::

## Przykład {.center style="text-align: center;"}

**Szukanie wartości maksymalnej w zbiorze**

## Przykład

::: {.fragment}
**Dane wejściowe**: Lista liczb.

**Dane wyjściowe**: Największa liczba z listy.
:::

::: {.fragment}
**Kroki**:
:::

1. Ustaw pierwszą liczbę z listy jako największą.
2. Dla każdej liczby na liście:

    Jeśli bieżąca liczba jest większa od największej, to ustaw ją na bieżącą.

3. Zwróć największą liczbę.

## Przykład -- schemat blokowy

::: {.fragment}
```{mermaid}
flowchart LR
    A[Start] --> B[Ustaw pierwszy element jako maks]
    B --> C[Dla każdego elementu z listy]
    C --> D{Czy bieżący element jest większy od maks?}
    D -- Tak --> E[Ustaw nowe maksimum]
    D -- Nie --> F[Sprawdź kolejny element]
    E --> F
    F --> G{Czy są kolejne elementy do sprawdzenia?}
    G -- Tak --> C
    G -- Nie --> H[Zwróć maks]
    H --> I[Koniec]
```
:::

::: {.fragment}
```mermaid
flowchart LR
    A[Start] --> B[Ustaw pierwszy element jako maks]
    B --> C[Dla każdego elementu z listy]
    C --> D{Czy bieżący element jest większy od maks?}
    D -- Tak --> E[Ustaw nowe maksimum]
    D -- Nie --> F[Sprawdź kolejny element]
    E --> F
    F --> G{Czy są kolejne elementy do sprawdzenia?}
    G -- Tak --> C
    G -- Nie --> H[Zwróć maks]
    H --> I[Koniec]
```
:::

## Przykład -- pseudokod

::: {.fragment}
::: {.callout-note appearance="simple"}
**Pseudokod** -- uproszczony sposób opisywania logiki algorytmu
bez użycia ścisłej składni określonego języka programowania.
Traktowany jest jako szkic kodu, zatem nie może zostać uruchomiony na 
komputerach.
:::
:::

::: {.fragment}
```
ALGORYTM ZnajdzMaks(lista)
  maks = lista[1]
  FOR kazdego elementu IN lista:
    IF element > maks THEN
      maks = element
  RETURN maks
```
:::

## Przykład -- implementacja

::::: columns
::: {.column width="50%"}
#### Python

```python
liczby = [1, 5, 2, 8, 3, 9, 4, 7, 6]
maks = liczby[0]

for liczba in liczby:
  if liczba > maks:
    maks = liczba
print(maks)
#> 9
```

:::

::: {.column width="50%"}
#### R

```r
liczby = c(1, 5, 2, 8, 3, 9, 4, 7, 6)
maks = liczby[1]

for (liczba in liczby) {
  if (liczba > maks) {
    maks = liczba
  }
}
print(maks)
#> 9
```

:::
:::::

\

::: {.fragment}
**Jakie są różnice między tymi dwoma blokami kodu?**
:::

## Algorytm geoprzestrzenny {.center style="text-align: center;"}

## Algorytm geoprzestrzenny

::: {.fragment}
**Algorytm geoprzestrzenny** to procedura obliczeniowa służąca do
przetwarzania i analizowania danych geoprzestrzennych (tj. w kontekście
przestrzennym).
:::

::: {.fragment}
Są one przede wszystkim wykorzystywane w systemach informacji geograficznej
do między innymi:

- analizy danych teledetekcyjnych,
- monitorowania środowiska,
- logistyki i nawigacji,
- planowania przestrzennego.
:::

## Przykłady algorytmów geoprzestrzennych {style="font-size: 90%;"}

::: {style="font-size: 70%;"}
- Algorytmy indeksowania przestrzennego:
  - Drzewo czwórkowe (*quadtree*).
  - R-drzewo (*R-tree*).
- Algorytmy interpolacji przestrzennej:
  - Odwrotne ważenie odległością (*Inverse Distance Weighting*).
  - Kriging.
- Algorytmy analizy sieci:
  - Algorytm Dijkstry.
  - Algorytm A* (*A-star search algorithm*).
- Algorytmy geometryczne:
  - Bufor.
  - Otoczka wypukła.
:::

## Przykłady zastosowań

::: {style="font-size: 75%;"}
- Zapytania przestrzenne (np. znalezienie punktów na określonym obszarze).
- Operacje geometryczne (np. stworzenie buforu obiektu liniowego).
- Transformacja współrzędnych (np. konwersja pomiędzy układami współrzędnych).
- Interpolacja przestrzenna (np. stworzenie ciągłej powierzchni z danych punktowych).
- Optymalizacja trasy (np. znalezienie najszybszej trasy do celu).
- Analizy ukształtowania terenu (np. obliczenie nachylenia terenu).
- **Inne??**
:::

## Technologie -- języki programowania

::::: columns
::: {.column width="25%"}
![](https://www.r-project.org/logo/Rlogo.png){width=70%}

::: {.nonincremental}
- [sf](https://github.com/r-spatial/sf)
- [stars](https://github.com/r-spatial/stars)
- [terra](https://github.com/rspatial/terra)
:::
:::

::: {.column width="25%"}
![](https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg)

::: {.nonincremental}
- [GeoPandas](https://github.com/geopandas/geopandas)
- [Rasterio](https://github.com/rasterio/rasterio)
- [rioxarray](https://github.com/corteva/rioxarray)
:::
:::

::: {.column width="30%"}
![](https://upload.wikimedia.org/wikipedia/commons/1/1f/Julia_Programming_Language_Logo.svg)

::: {.nonincremental}
- [GeometryOps.jl](https://github.com/JuliaGeo/GeometryOps.jl)
- [Rasters.jl](https://github.com/rafaqz/Rasters.jl)
:::
:::

::: {.column width="20%"}
![](https://raw.githubusercontent.com/Benio101/cpp-logo/refs/heads/master/cpp_logo.svg){height=100}

::: {.nonincremental}
- [**GDAL**](https://gdal.org)
- [**GEOS**](https://libgeos.org/)
- [PDAL](https://pdal.io)
- [S2](http://s2geometry.io/)
:::
:::
:::::

## Technologie -- oprogramowanie

::::: columns
::: {.column width="33%"}
![[QGIS](https://www.qgis.org/)](https://upload.wikimedia.org/wikipedia/commons/9/91/QGIS_logo_new.svg)
:::

::: {.column width="33%"}
![[Saga GIS](https://saga-gis.sourceforge.io/en/index.html)](https://saga-gis.sourceforge.io/_images/logo_saga_big.png)
:::

::: {.column width="33%"}
![[Grass GIS](https://grass.osgeo.org/)](https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Grass_GIS.svg/222px-Grass_GIS.svg.png)
:::
:::::

## QGIS

::::: columns
::: {.column width="60%"}
![](https://www.qgis.org/flickr-images/45686093281_a90e54849a_b.jpg.jpg)
:::

::: {.column width="40%"}
::: {style="font-size: 40%;"}
328 algorytmów (narzędzi) w 26 kategoriach:

::: {.nonincremental}
- Kafle 3D
- Kartografia
- Bazy danych
- Narzędzia plików
- GPS
- Interpolacja
- Narzędzia warstw
- *Mesh*
- Narzędzia modelera
- Analiza sieci
- Wykresy
- Przetwarzanie chmury punktów (3 moduły)
- Przetwarzanie rastrów (4 moduły)
- Przetwarzanie wektorów (8 modułów)
:::
:::

:::
:::::

::: {style="text-align: center;"}
[**DOKUMENTACJA**](https://docs.qgis.org/3.34/en/docs/user_manual/processing_algs/qgis/)
:::

## Saga GIS

::::: columns
::: {.column width="60%"}
![](https://saga-gis.sourceforge.io/_images/software/gui_maps.png)
:::

::: {.column width="40%"}
::: {style="font-size: 40%;"}
802 algorytmów (narzędzi) w 16 kategoriach:

::: {.nonincremental}
- Klimat i pogoda
- Różne
- Raster (*grid*)
- Raster wielokanałowy (*grid collection*)
- Przetwarzanie obrazów
- Import/Eksport danych
- Projekcje
- Raportowanie
- Wektor (*shapes*)
- Symulacje
- Analiza przestrzenna i geostatystyka
- Nieregularna sieć trójkątów (*TIN*)
- Dane tabelaryczne
- Analiza terenu
- Narzędzia (*tool chains*)
- Wizualizacje
:::
:::

:::
:::::

::: {style="text-align: center;"}
[**DOKUMENTACJA**](https://saga-gis.sourceforge.io/saga_tool_doc/9.6.1/)
:::

## Grass GIS

::::: columns
::: {.column width="60%"}
![](https://grass.osgeo.org/images/gallery/gui/grass75_ndvi_rgb_rio_cuarto.png)
:::

::: {.column width="40%"}
::: {style="font-size: 40%;"}
444 algorytmów (narzędzi) w 10 kategoriach:

::: {.nonincremental}
- Wizualizacja
- Ogólne
- Przetwarzanie rastrów
- Przetwarzanie rastrów 3D
- Przetwarzanie obrazów
- Przetwarzanie wektorów
- Bazy danych
- Przetwarzanie czasowe
- Kartografia
- Różne
:::
:::

:::
:::::

::: {style="text-align: center;"}
[**DOKUMENTACJA**](https://grass.osgeo.org/grass-stable/manuals/)
:::

## Geointerfejs {.center style="text-align: center;"}

## Geointerfejs

::: {.fragment}
::: {.callout-note appearance="simple"}
Interfejsy definiują sposób, w jaki różne części systemu współdziałają ze sobą,
umożliwiając im komunikację i wymianę informacji.
:::
:::

::: {.fragment}
**Geointerfejs** odnosi się do interfejsu, który zapewnia dostęp do
danych i usług geoprzestrzennych, umożliwiając interakcje pomiędzy różnymi
systemami geoprzestrzennymi za pomocą interfejsu programowania aplikacji (*API*).
:::

::: {.fragment}
Otwarte interfejsy umożliwiają interoperacyjność między różnymi
narzędziami, nawet jeśli są napisane w innych językach programowania lub
używają odmiennych struktur do reprezentacji danych.
:::

## Interfejs wiersza poleceń

::: {.fragment}
::: {.callout-note appearance="simple"}
Interfejs wiersza poleceń (*CLI*) to oparty na tekście interfejs, który
umożliwia użytkownikom interakcję z systemem lub oprogramowaniem poprzez
wpisywanie poleceń w konsoli.
:::
:::

::: {.fragment}
::::: columns
::: {.column width="60%"}
![](_images/1_saga_cmd.png)

::: {style="font-size: 40%;"}
<https://saga-gis.sourceforge.io/saga_tool_doc/9.6.1/ta_morphometry_0.html>
:::
:::

::: {.column width="40%"}
::: {style="font-size: 90%;"}
Wykorzystanie algorytmów programów GISowych jest możliwe poprzez powłokę
systemową (np. bash czy PowerShell).
:::
:::
:::::
:::

## Geointerfejsy w R

::: {style="text-align: center;"}

```{mermaid}
flowchart TD
    A[R] --> B{{<a href='https://github.com/paleolimbot/geos'>geos</a>}}
    B --> C[GEOS]
    A --> D{{<a href='https://github.com/USDAForestService/gdalraster'>gdalraster</a>}}
    D --> E[GDAL]
    A --> F{{<a href='https://github.com/stevenpawley/Rsagacmd'>Rsagacmd</a>}}
    F --> G[Saga GIS]
    A --> H{{<a href='https://github.com/rsbivand/rgrass'>rgrass</a>}}
    H --> I[Grass GIS]
    A --> J{{<a href='https://github.com/r-spatial/qgisprocess'>qgisprocess</a>}}
    J --> K[QGIS]
```

:::

## Przykład

::: {style="font-size: 80%;"}
Wykorzystanie [QGIS CLI](https://docs.qgis.org/3.34/en/docs/user_manual/processing/standalone.html)
za pośrednictwem pakietu `qgisprocess` w R:
:::

```r
library(qgisprocess)

qgis_search_algorithms("buffer")
#>    provider_title    group                algorithm          
#>  1 GDAL              Vector geoprocessing gdal:buffervectors
#>  2 GRASS             Vector (v.*)         grass7:v.buffer   
#>  3 QGIS (native c++) Vector geometry      native:buffer     

qgis_run_algorithm(
  "native:buffer",
  INPUT = "punkt.gpkg",
  OUTPUT = "bufor.gpkg",
  DISTANCE = 100
)
#> Geometry set for 1 feature 
#> Geometry type: POLYGON
#> Dimension:     XY
#> Bounding box:  xmin: 411648 ymin: 5084491 xmax: 411668 ymax: 5084511
#> Projected CRS: NAD83 / UTM zone 20N
#> POLYGON ((411668 5084501, 411668 5084498, 4...
```
